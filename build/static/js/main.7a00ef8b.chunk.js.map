{"version":3,"sources":["components/Result.js","components/Search.js","views/Home.js","App.js","serviceWorker.js","index.js"],"names":["Result","props","state","data","this","className","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","i","key","scope","href","html_url","target","login","full_name","type","score","src","avatar_url","React","Component","Search","setSearchBy","e","q","query","setState","searchBy","setTimeout","loading","fetchSearchResults","buildUrl","page","searchUrl","rowsPerPage","axios","get","then","res","resultNotFoundMsg","items","length","results","slice","message","totalResults","total_count","catch","error","isCancel","handleOnInputChange","value","totalPages","renderSearchResults","Object","keys","pageSize","handleChangePage","handleChangeRowsPerPage","renderPagination","TablePagination","rowsPerPageOptions","count","onChangePage","onChangeRowsPerPage","currentPageNo","htmlFor","OutlinedInput","name","id","placeholder","endAdornment","InputAdornment","position","onChange","FormControl","FormLabel","RadioGroup","FormControlLabel","control","Radio","label","style","display","CircularProgress","HomeView","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.7a00ef8b.chunk.js","sourcesContent":["import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nexport class Result extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    getRow() {\n\n    }\n\n    render() {\n        const {data} = this.props.data;\n        return (\n            <div className=\"result--container\">\n                <div>\n                    <p>{data}</p>\n                    <TableContainer component={Paper}>\n                        <Table size=\"small\" aria-label=\"a dense table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Name</TableCell>\n                                    <TableCell align=\"right\">Type</TableCell>\n                                    <TableCell align=\"right\">Score</TableCell>\n                                    <TableCell align=\"right\">Avatar</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {this.props.data.map((row, i) => (\n                                    <TableRow key={`id-${i}`}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            <a href={row.html_url} target=\"_blank\">{row.login || row.full_name}</a>\n                                        </TableCell>\n                                        <TableCell align=\"right\">{row.type || 'Repo'}</TableCell>\n                                        <TableCell align=\"right\">{row.score}</TableCell>\n                                        <TableCell align=\"right\"><img src={row.avatar_url}/></TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport axios from 'axios';\nimport {CircularProgress, TablePagination, OutlinedInput, InputAdornment} from \"@material-ui/core\";\nimport {Result} from './Result';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nexport default class Search extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            query: '',\n            results: {},\n            loading: false,\n            message: '',\n            totalResults: null,\n            currentPageNo: null,\n            rowsPerPage: 30,\n            page: 0,\n            searchBy: 'users'\n        };\n\n    }\n\n    setSearchBy = (e, q) => {\n        const {query} = this.state;\n        if (!query) {\n            this.setState({searchBy: q});\n        } else {\n            this.setState({searchBy: q}, () => {\n                setTimeout(() => {\n                    this.setState({loading: true});\n                    this.fetchSearchResults();\n                }, 200)\n            });\n        }\n    };\n\n    buildUrl = () => {\n        const {page, query, searchBy} = this.state;\n        let url = `https://api.github.com/search/${searchBy}?q=${query}&page=${page}`;\n        return url;\n    };\n\n    fetchSearchResults = () => {\n        const searchUrl = this.buildUrl();\n        const {rowsPerPage} = this.state;\n        axios.get(searchUrl, {})\n            .then(res => {\n                const resultNotFoundMsg = !res.data.items.length\n                    ? 'Uhhh No results were found.'\n                    : '';\n                const results = res.data.items.slice(0, rowsPerPage);\n                this.setState({\n                    results: results,\n                    message: resultNotFoundMsg,\n                    totalResults: res.data.total_count,\n                    loading: false\n                })\n            })\n            .catch(error => {\n                if (axios.isCancel(error) || error) {\n                    this.setState({\n                        loading: false,\n                        message: 'There was an issue fetching the data.'\n                    })\n                }\n            })\n    };\n\n    handleOnInputChange = (e, q) => {\n        const query = e.target.value;\n        if (!query) {\n            this.setState({query, results: {}, message: '', totalPages: 0, totalResults: 0});\n        } else {\n            this.setState({query, message: ''}, () => {\n                setTimeout(() => {\n                    this.setState({loading: true});\n                    this.fetchSearchResults();\n                }, 1500)\n            });\n        }\n    };\n\n\n    renderSearchResults = () => {\n        const {results} = this.state;\n\n        if (Object.keys(results).length && results.length) {\n            return (\n                <div className=\"results--container\">\n                    <Result data={results} pageSize={this.state.rowsPerPage} searchBy={this.state.searchBy}/>\n                </div>\n            )\n        }\n    };\n\n    handleChangePage = (e, page) => {\n        this.setState({page: page, loading: true}, () => {\n            this.fetchSearchResults();\n        });\n    };\n\n    handleChangeRowsPerPage = (page) => {\n        this.setState({rowsPerPage: page.props.value, loading: true}, () => {\n            this.fetchSearchResults();\n        });\n    };\n\n    renderPagination = () => {\n        const {totalResults, results, rowsPerPage, page} = this.state;\n        if (Object.keys(results).length && results.length) {\n            return (\n                <div className=\"pagination--container\">\n                    <TablePagination\n                        rowsPerPageOptions={[10, 20, 30]}\n                        component=\"div\"\n                        count={totalResults}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onChangePage={(e, page) => this.handleChangePage(e, page)}\n                        onChangeRowsPerPage={(e, page) => this.handleChangeRowsPerPage(page)}\n                    />\n\n                </div>\n            )\n        }\n    };\n\n\n    render() {\n        const {query, loading, message, searchBy} = this.state;\n\n        return (\n            <div className=\"search--container\">\n                <div className=\"header\">\n                    <h1>Github UI Search</h1>\n                    <div className=\"search--bar\">\n                        <label className=\"search-label\" htmlFor=\"search-input\">\n                            <OutlinedInput\n                                type=\"text\"\n                                name=\"query\"\n                                value={query}\n                                id=\"search-input\"\n                                placeholder=\"Search...\"\n                                endAdornment={\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon/>\n                                    </InputAdornment>\n                                }\n                                onChange={(e, q) => this.handleOnInputChange(e, q)}\n                            />\n                        </label>\n\n                        <div className=\"radios\">\n                            <FormControl component=\"fieldset\">\n                                <FormLabel component=\"legend\">Search By</FormLabel>\n                                <RadioGroup row aria-label=\"searchBy\" name=\"searchBy\" value={searchBy} onChange={(e, q) => this.setSearchBy(e, q)}>\n                                    <FormControlLabel value=\"users\" control={<Radio/>} label=\"User\"/>\n                                    <FormControlLabel value=\"repositories\" control={<Radio/>} label=\"Repository\"/>\n                                </RadioGroup>\n                            </FormControl>\n                        </div>\n                    </div>\n                </div>\n\n                {/*\tError Message*/}\n                {message && <p className=\"message\">{message}</p>}\n\n                {/*\tLoader*/}\n                <div className={'loader'} style={{display: loading ? \"block\" : \"none\"}}>\n                    <div>\n                        <CircularProgress/>\n                    </div>\n                </div>\n\n                {/*\tResult*/}\n                {this.renderSearchResults()}\n\n                {/*Navigation*/}\n                {this.renderPagination()}\n\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport Search from '../components/Search'\n\nexport default class HomeView extends React.Component {\n    render() {\n        return (\n            <div>\n                <Search/>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport \"./App.sass\";\nimport HomeView from './views/Home'\n\nexport default class App extends React.Component {\n\n  render() {\n    return (\n        <Router>\n          <Switch>\n            <Route path=\"/\">\n              <HomeView></HomeView>\n            </Route>\n          </Switch>\n        </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}